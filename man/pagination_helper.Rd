% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/pagination.R
\name{pagination_helper}
\alias{pagination_helper}
\alias{get_current_page}
\alias{get_total_pages}
\alias{has_next_page}
\title{Pagination Management}
\usage{
get_current_page(resp)

get_total_pages(resp)

has_next_page(resp)
}
\arguments{
\item{resp}{lastfmr response object}
}
\value{
\itemize{
\item \code{\link[=get_current_page]{get_current_page()}} returns an integer
\item \code{\link[=has_next_page]{has_next_page()}} returns a boolean
\item \code{\link[=get_next_page]{get_next_page()}} returns a \code{lastfmr} object
}
}
\description{
Many of last.fm API responses are paginated with a page size maximum of 50.
lastfmr provides a series of functions that help to deal with these pages.

End-users are not expected to interact with these functions directly in most
cases since pagination is already taken into account when invoking the raw
or tidy data request functions.

Note that some endpoints return pagination based on OpenSearch query results
and information about next pages, etc. are stored in slightly different ways.
\itemize{
\item \code{\link[=get_current_page]{get_current_page()}} and \code{\link[=get_total_pages]{get_total_pages()}} return the current page of a
response and the total number of pages available, respectively.
\item \code{\link[=has_next_page]{has_next_page()}} checks if there are more pages after the current page.
}
}
